import java.util.*;

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}

class MapEntry<K, E> {
    // Each MapEntry object is a pair consisting of a key
    // and a value (an arbitrary object).
    K key;
    E value;

    public MapEntry(K key, E val) {
        this.key = key;
        this.value = val;
    }

    public String toString() {
        return "<" + key + "," + value + ">";
    }
}

class CBHT<K, E> {
    // An object of class CBHT is a closed-bucket hash table, containing
    // entries of class MapEntry.
    private SLLNode<MapEntry<K, E>>[] buckets;

    @SuppressWarnings("unchecked")
    public CBHT(int m) {
        // Construct an empty CBHT with m buckets.
        buckets = (SLLNode<MapEntry<K, E>>[]) new SLLNode[m];
    }

    private int hash(K key) {
        // Translate key to an index of the array buckets.
        return Math.abs(key.hashCode()) % buckets.length;
    }

    public SLLNode<MapEntry<K, E>> search(K targetKey) {
        // Find which if any node of this CBHT contains an entry whose key is equal to targetKey.
        // Return a link to that node (or null if there is none).
        int b = hash(targetKey);
        SLLNode<MapEntry<K, E>> currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(targetKey)) return currNode;
            else currNode = currNode.succ;
        }
        return null;
    }

//DODAENO +++______________________________________________________________________________________________________________
    public SLLNode<MapEntry<K, E>> getFirst(K targetKey) {
        int b = hash(targetKey);
        return buckets[b];
    }
//___________________ova e za da go vrati prviot node na listata__________________________________________________________

    public void insert(K key, E val) {
        // Insert the entry <key, val> into this CBHT.
        // If entry with same key exists, overwrite it.
        MapEntry<K, E> newEntry = new MapEntry<>(key, val);
        int b = hash(key);
        SLLNode<MapEntry<K, E>> currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(key)) {
                // Make newEntry replace the existing entry ...
                currNode.element = newEntry;
                return;
            } else currNode = currNode.succ;
        }
        // Insert newEntry at the front of the SLL in bucket b ...
        buckets[b] = new SLLNode<>(newEntry, buckets[b]);
    }

    public void delete(K key) {
        // Delete the entry (if any) whose key is equal to key from this CBHT.
        int b = hash(key);
        SLLNode<MapEntry<K, E>> predNode = null, currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(key)) {
                if (predNode == null) buckets[b] = currNode.succ;
                else predNode.succ = currNode.succ;
                return;
            } else {
                predNode = currNode;
                currNode = currNode.succ;
            }
        }
    }

    public String toString() {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            SLLNode<MapEntry<K, E>> curr = buckets[i];
            while (curr != null) {
                temp += curr.element.toString() + " ";
                curr = curr.succ;
            }
            temp += "\n";
        }
        return temp;
    }
}


class Person {
    public String name;

    public Person(String name) {
        this.name = name;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Person person = (Person) o;
        return Objects.equals(name, person.name);
    }

    @Override
    public int hashCode() {
        int hash = (100 * name.charAt(0) + name.charAt(1)) % 9091;
        return hash;
    }

    @Override
    public String toString() {
        return name;
    }
}


public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        
        int n = input.nextInt();
        CBHT<Person, Integer> zenski = new CBHT<>(9091);
        CBHT<Person, Integer> maski = new CBHT<>(9091);

        for (int i = 0; i < n; i++) {
            String ime = input.next().toUpperCase();
            String pol = input.next();

            Person person=new Person(ime);

            if (pol.equals("F")) {
                if (zenski.search(person) != null) {
                    zenski.search(person).element.value++;
                } else {
                    zenski.insert(person, 1);
                }
            } else if (pol.equals("M")) {
                if (maski.search(person) != null) {
                    maski.search(person).element.value++;
                } else {
                    maski.insert(person, 1);
                }
            }
        }


        String baranPol=input.next();
        String baraniIminja = "";

        while (!baraniIminja.equals("END")) {
            baraniIminja = input.next().toUpperCase();

            Person p = new Person(baraniIminja);
            CBHT<Person, Integer> chbt;

            if(baranPol.equals("F")){
                chbt=zenski;
            }else{
                chbt=maski;
            }

            SLLNode<MapEntry<Person, Integer>> nodes = chbt.getFirst(p);

            while (nodes != null) { //SPORED HASH FUNKCIJATA ispecati gi site iminja koj zapocnuvat na prvite dve isti bukvi kako baranoto ime pr.MArija(barano ime) chbt: MAkedonka, MAgdalena
                System.out.println(nodes.element.key.name); 
                nodes = nodes.succ;
            }

            boolean istoIme = false;

            nodes = chbt.getFirst(p); 
            while (nodes != null) {

                MapEntry<Person, Integer> entry = nodes.element; //vidi dali ima isto ime kako baranio ako ima ispecati ''POL IME KOLKU-PATI-GO-IMA''
                if (entry.key.name.equals(baraniIminja)) {
                    System.out.println(baranPol + " " + entry.key.name + " " + entry.value);
                    istoIme = true;
                    break;
                }
                nodes = nodes.succ;
            }

            if (!istoIme) { 
                System.out.println("No such name");
            }
        }
    }
}
